#include <Pt.h>
#include <assert.h>

int resize_container_cb00(PtWidget_t *w, void *d, PtCallbackInfo_t *cbinfo) {
  d = d;
  w = w;
  cbinfo = cbinfo;
  return Pt_CONTINUE;
}

int main( int argc, char *argv[] )
{
  PtWidget_t *window, *container, *divider, *column00, *column01;
  PtArg_t args[20];
  int i = 0;

  PhPoint_t point;
  PhDim_t dim;
  point.x = 0; point.y = 0;
  dim.w = 50; dim.h = 30;
  //PhArea_t x = { .pos = { .x = 10, .y = 10 }, .size = { .w = 10, .h = 10 } };
  //PtSetArg( &args[i++], Pt_ARG_AREA, &x, 0);

  /* Create a window */
  i = 0;
  //PtSetArg( &args[i++], Pt_ARG_POS, &tblPos, 0);
  //PtSetArg( &args[i++], Pt_ARG_DIM, &tblDim, 0);
  PtSetArg( &args[i++], Pt_ARG_WINDOW_TITLE, "demo window", 0 );
  if ( NULL == ( window = PtAppInit( NULL, &argc, argv, i, args ) ) ) {
    perror( "PtAppInit()" );
    return 1;
  }

  i = 0;
  /* disable any frames */
  //PtSetArg( &args[i++], Pt_ARG_BASIC_FLAGS, Pt_FALSE,
  //    Pt_ALL_ETCHES | Pt_ALL_BEVELS | Pt_ALL_OUTLINES ); //Pt_FLAT_FILL
  /* value of pointer is current count of cells */
  //PtSetArg( &args[i++], Pt_ARG_POINTER, 0, 0 );
  //PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_ALWAYS, 0 );
  PtSetArg( &args[i++], Pt_ARG_ANCHOR_FLAGS,
      Pt_BOTTOM_ANCHORED_BOTTOM | Pt_TOP_ANCHORED_TOP |
      Pt_LEFT_ANCHORED_LEFT     | Pt_RIGHT_ANCHORED_RIGHT,
      Pt_BOTTOM_IS_ANCHORED | Pt_TOP_IS_ANCHORED |
      Pt_LEFT_IS_ANCHORED   | Pt_RIGHT_IS_ANCHORED );
  //container = PtCreateWidget( PtContainer, window, i, args );
  //assert(container != NULL);
  container = window;

  PtCallback_t callbacks[1];
  callbacks[0].event_f = resize_container_cb00;
  //callbacks[0].data = scrollCon;
  i = 0;
  //PtSetArg(&args[i++], Pt_CB_RESIZE, callbacks,
  //    sizeof(callbacks)/sizeof(callbacks[0]));
  //PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_ALWAYS, 0 );
  //PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_AS_REQUIRED, 0 );
  //Pt_RESIZE_BOTH
  //PtSetArg( &args[i++], Pt_ARG_CONTAINER_FLAGS,
  //    Pt_ENABLE_CUA | Pt_ENABLE_CUA_ARROWS | Pt_AUTO_EXTENT, 0 );
  PtSetArg( &args[i++], Pt_ARG_ANCHOR_FLAGS,
      Pt_BOTTOM_ANCHORED_BOTTOM | Pt_TOP_ANCHORED_TOP |
      Pt_LEFT_ANCHORED_LEFT     | Pt_RIGHT_ANCHORED_RIGHT,
      Pt_IS_ANCHORED);
      //Pt_BOTTOM_IS_ANCHORED | Pt_TOP_IS_ANCHORED |
      //Pt_LEFT_IS_ANCHORED   | Pt_RIGHT_IS_ANCHORED );
  //divider = PtCreateWidget( PtDivider, container, i, args );
  divider = container;

  /*
  PhArea_t _area = { .pos = { .x = 15, .y = 15 }, .size = { .w = 15, .h = 15 } };
  if (PtGetResource(parent, Pt_ARG_AREA, &_area, 0))
    PtExit(EXIT_FAILURE);
  printf("area %hu %hu %hu %hu\n",
      _area.pos.x, _area.pos.y, _area.size.w, _area.size.h);
  */

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_GROUP_FLAGS, Pt_GROUP_EQUAL_SIZE_HORIZONTAL, 0 );
  //PtSetArg( &args[i++], Pt_ARG_GROUP_FLAGS, Pt_GROUP_STRETCH_HORIZONTAL, 0 );
  //PtSetArg( &args[i++], Pt_ARG_CELL_HORZ_ALIGN, Pt_GROUP_HORZ_CENTER, 0 );
  PtSetArg( &args[i++], Pt_ARG_GROUP_ORIENTATION, Pt_GROUP_VERTICAL, 0 );
  //PtSetArg( &args[i++], Pt_ARG_GROUP_ROWS_COLS, 10, 0 );
  //PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_AS_REQUIRED, 0 );
  PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_ALWAYS, 0 );
  column00 = PtCreateWidget( PtGroup, divider, i, args );
  i = 0;
  //PtSetArg( &args[i++], Pt_ARG_GROUP_FLAGS, Pt_GROUP_EQUAL_SIZE, 0 );
  PtSetArg( &args[i++], Pt_ARG_GROUP_FLAGS, Pt_GROUP_EQUAL_SIZE_HORIZONTAL, 0 );
  PtSetArg( &args[i++], Pt_ARG_GROUP_ORIENTATION, Pt_GROUP_VERTICAL, 0 );
  PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_ALWAYS, 0 );
  //column01 = PtCreateWidget( PtGroup, divider, i, args );
  column01 = column00;

  /* column00 buttons */
  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "B1", 0 );
  PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_ALWAYS, 0 );
  //PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_AS_REQUIRED, 0 );
  //PtSetArg( &args[i++], Pt_ARG_LAYOUT_DATA, &data, PtGridLayout);
  PtCreateWidget( PtText, column00, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "Button 2 (two)", 0);
  PtCreateWidget( PtButton, column00, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "Butt 3", 0 );
  PtCreateWidget( PtButton, column00, i, args );

  /* column01 buttons */
  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "B4", 0 );
  PtCreateWidget( PtButton, column01, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "Butt 5", 0 );
  PtCreateWidget( PtButton, column01, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "Buttonchen 6", 0 );
  PtCreateWidget( PtButton, column01, i, args );

  PtRealizeWidget( window );
  PtMainLoop();

  return 0;
}
