#include <Pt.h>

int resize_container_cb00(PtWidget_t *w, void *d, PtCallbackInfo_t *cbinfo) {
  d = d;
  printf("old_dim %hu %hu\n",
      ((PtContainerCallback_t *)cbinfo->cbdata)->old_dim.w,
      ((PtContainerCallback_t *)cbinfo->cbdata)->old_dim.h);
  printf("new_dim %hu %hu\n",
      ((PtContainerCallback_t *)cbinfo->cbdata)->new_dim.w,
      ((PtContainerCallback_t *)cbinfo->cbdata)->new_dim.h);

  if (PtSetResource(w, Pt_ARG_DIM,
        &(((PtContainerCallback_t *)cbinfo->cbdata)->new_dim), 0))
    //PtExit(EXIT_FAILURE);

  return Pt_CONTINUE;
  return Pt_CONTINUE;
}

int
main( int argc, char *argv[] )
{
  PtWidget_t *window, *scrollCon, *parent;
  PtArg_t args[20];
  int i = 0;

  PtGridLayoutInfo_t lInfo = PtGridLayoutInfoDflts;
  PtGridLayoutData_t data = PtGridLayoutDataDflts;
  lInfo.n_cols = 1;
  lInfo.flags = 0;
  data.flags = Pt_H_ALIGN_BEGINNING;

  PhPoint_t tblPos;
  PhDim_t tblDim;
  tblPos.x = 0; tblPos.y = 0;
  tblDim.w = 40; tblDim.h = 40;

  /* Create a window */
  i = 0;
  //PtSetArg( &args[i++], Pt_ARG_POS, &tblPos, 0);
  //PtSetArg( &args[i++], Pt_ARG_DIM, &tblDim, 0);
  //PtSetArg( &args[i++], Pt_ARG_LAYOUT, PtGridLayout, &lInfo );
  PtSetArg( &args[i++], Pt_ARG_WINDOW_TITLE, "PtGridLayout", 0 );
  if( NULL == ( window = PtAppInit( NULL, &argc, argv, i,
          args ) ) ) {
    perror( "PtAppInit()" );
    return 1;
  }

  i = 0;
  /* disable any frames */
  //PtSetArg( &args[i++], Pt_ARG_BASIC_FLAGS, Pt_FALSE,
  //    Pt_ALL_ETCHES | Pt_ALL_BEVELS | Pt_ALL_OUTLINES ); //Pt_FLAT_FILL
  /* value of pointer is current count of cells */
  PtSetArg( &args[i++], Pt_ARG_POINTER, 0, 0 );
  //PtSetArg( &args[i++], Pt_ARG_CONTAINER_FLAGS,
  //    Pt_ENABLE_CUA | Pt_AUTO_EXTENT, 0 );
  //    //Pt_ENABLE_CUA | Pt_ENABLE_CUA_ARROWS | Pt_AUTO_EXTENT, 0 );
  //PtSetArg( &args[i++], Pt_ARG_SCROLLCONT_RESIZE_FLAGS, Pt_RESIZE_XY_AS_REQUIRED, 0 );
  PtSetArg( &args[i++], Pt_ARG_SCROLLCONT_RESIZE_FLAGS, Pt_RESIZE_XY_ALWAYS, 0 );
  PtSetArg( &args[i++], Pt_ARG_ANCHOR_FLAGS,
      Pt_BOTTOM_ANCHORED_BOTTOM | Pt_TOP_ANCHORED_TOP |
      Pt_LEFT_ANCHORED_LEFT     | Pt_RIGHT_ANCHORED_RIGHT,
      Pt_BOTTOM_IS_ANCHORED | Pt_TOP_IS_ANCHORED |
      Pt_LEFT_IS_ANCHORED   | Pt_RIGHT_IS_ANCHORED );
  //PtSetArg( &args[i++], Pt_ARG_ANCHOR_FLAGS,
  //    Pt_BOTTOM_ANCHORED_RELATIVE | Pt_TOP_ANCHORED_RELATIVE |
  //    Pt_LEFT_ANCHORED_RELATIVE     | Pt_RIGHT_ANCHORED_RELATIVE,
  //    Pt_BOTTOM_IS_ANCHORED | Pt_TOP_IS_ANCHORED |
  //    Pt_LEFT_IS_ANCHORED   | Pt_RIGHT_IS_ANCHORED );
  //PhRect_t offsets;
  //offsets.ul.x = 9000;  // for RELATIVE these are not px, but promile
  //offsets.ul.y = 9000;
  //offsets.lr.x = 9000;
  //offsets.lr.y = 9000;
  //PtSetArg( &args[i++], Pt_ARG_ANCHOR_OFFSETS, &offsets, 0 );
  //FIXME pridat 3px right_offset a bottom_offset
  //scrollCon = PtCreateWidget( PtScrollContainer, window, i, args );
  scrollCon = window;

  PtCallback_t callbacks[1];
  callbacks[0].event_f = resize_container_cb00;
  //callbacks[0].data = scrollCon;
  lInfo.n_cols = 2;
  i = 0;
  PtSetArg(&args[i++], Pt_CB_RESIZE, callbacks,
      sizeof(callbacks)/sizeof(callbacks[0]));
  //PtSetArg( &args[i++], Pt_ARG_POS, &tblPos, 0);
  PtSetArg( &args[i++], Pt_ARG_LAYOUT, PtGridLayout, &lInfo );
  //PtSetArg( &args[i++], Pt_ARG_DIM, &tblDim, 0);
  //PhArea_t x = { .pos = { .x = 10, .y = 10 }, .size = { .w = 10, .h = 10 } };
  //PtSetArg( &args[i++], Pt_ARG_AREA, &x, 0);
  //PtSetArg( &args[i++], Pt_ARG_DIM, &tblDim, 0);
  PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_ALWAYS, 0 );
  //PtSetArg( &args[i++], Pt_ARG_RESIZE_FLAGS, Pt_RESIZE_XY_AS_REQUIRED, 0 );
  PtSetArg( &args[i++], Pt_ARG_CONTAINER_FLAGS,
      Pt_ENABLE_CUA | Pt_ENABLE_CUA_ARROWS | Pt_AUTO_EXTENT, 0 );
  parent = PtCreateWidget( PtContainer, scrollCon, i, args );

  PhArea_t _area = { .pos = { .x = 15, .y = 15 }, .size = { .w = 15, .h = 15 } };
  if (PtGetResource(parent, Pt_ARG_AREA, &_area, 0))
    PtExit(EXIT_FAILURE);
  printf("area %hu %hu %hu %hu\n",
      _area.pos.x, _area.pos.y, _area.size.w, _area.size.h);
  PhDim_t _dim = { .w = 15, .h = 15 };
  if (PtGetResource(parent, Pt_ARG_DIM, &_dim, 0))
    PtExit(EXIT_FAILURE);
  printf("dim %hu %hu\n", _dim.w, _dim.h);
  unsigned short _width = 15;
  if (PtGetResource(parent, Pt_ARG_WIDTH, &_width, 0))
    PtExit(EXIT_FAILURE);
  printf("width %hu\n", _width);

  /* Create buttons */
  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "B1", 0 );
  PtSetArg( &args[i++], Pt_ARG_LAYOUT_DATA, &data, PtGridLayout);
  PtCreateWidget( PtButton, parent, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "Button 2 (two)", 0);
  PtSetArg( &args[i++], Pt_ARG_LAYOUT_DATA, &data, PtGridLayout);
  PtCreateWidget( PtButton, parent, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "Butt 3", 0 );
  PtSetArg( &args[i++], Pt_ARG_LAYOUT_DATA, &data, PtGridLayout);
  PtCreateWidget( PtButton, parent, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "B4", 0 );
  PtSetArg( &args[i++], Pt_ARG_LAYOUT_DATA, &data, PtGridLayout);
  PtCreateWidget( PtButton, parent, i, args );

  i = 0;
  PtSetArg( &args[i++], Pt_ARG_TEXT_STRING, "Butt 5", 0 );
  PtSetArg( &args[i++], Pt_ARG_LAYOUT_DATA, &data, PtGridLayout);
  PtCreateWidget( PtButton, parent, i, args );

  PtRealizeWidget( window );
  PtMainLoop();

  return 0;
}
